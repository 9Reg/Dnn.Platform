/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/****** Task DNN-3371: add sp Journal_GetSearchItems. ******/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_GetSearchItems]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_GetSearchItems
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetSearchItems]
	@PortalId INT,
	@ModuleId INT,
	@StartDate DATETIME,
	@StartJournalId INT,
	@NumbersOfResult INT = 500
AS
    DECLARE @IncludeOutside BIT = 0
    DECLARE @TopModuleID INT = 0
    DECLARE @JournalDefID INT = 0

	SELECT  TOP 1 @TopModuleID = ModuleID, @JournalDefID = M.ModuleDefID
	FROM {databaseOwner}{objectQualifier}vw_Modules M
		INNER JOIN {databaseOwner}{objectQualifier}Tabs T ON T.TabId = M.TabId
		INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions md ON md.ModuleDefID = M.ModuleDefID AND md.FriendlyName = 'Journal'
	WHERE  M.IsDeleted = 0  
		AND T.IsDeleted = 0  
		AND M.IsAdmin = 0
		AND (M.SupportedFeatures & 2 = 2)
		AND (T.EndDate > GETDATE() or T.EndDate IS NULL) 
		AND (T.StartDate <= GETDATE() or T.StartDate IS NULL) 
		AND (M.StartDate <= GETDATE() or M.StartDate IS NULL) 
		AND (M.EndDate > GETDATE() or M.EndDate IS NULL) 
		AND (NOT (M.BusinessControllerClass IS NULL))

	IF @ModuleId = @TopModuleID
		SELECT @IncludeOutside = 1

	;WITH ValidJournals AS (
	SELECT	JournalId
			FROM (
					SELECT *, ROW_NUMBER() OVER (ORDER BY JournalId) rownumber FROM (
						SELECT  DISTINCT(j.JournalId)
								
						 FROM {databaseOwner}{objectQualifier}Journal j
						INNER JOIN {databaseOwner}{objectQualifier}Journal_Security js ON js.JournalId = j.JournalId
						INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID = j.UserId
						INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID = j.ContentItemId
                        LEFT JOIN {databaseOwner}{objectQualifier}Journal_Comments jc ON jc.JournalId = j.JournalId
                        LEFT JOIN {databaseOwner}{objectQualifier}vw_Modules vm ON vm.ModuleID = ci.ModuleID
						WHERE ((ci.ModuleID = @ModuleId) OR (@IncludeOutside = 1 AND (ci.ModuleID <= 0 OR (vm.ModuleDefID <> @JournalDefId AND vm.SupportedFeatures & 2 <> 2 ) ) ) )
						AND (j.DateUpdated > @StartDate OR jc.DateUpdated > @StartDate)
						AND j.JournalId > @StartJournalId) AS T
				 ) AS T WHERE rownumber <= @NumbersOfResult )

				 SELECT  j.JournalId,
								JournalTypeId,
								j.UserId,
								DateUpdated,
								ProfileId,
								GroupId,
								u.DisplayName AS Title,
								CASE WHEN Summary IS NOT NULL AND Summary <> '' THEN Summary ELSE Title END AS Summary,
                                ItemData,
								js.SecurityKey,
                                ci.TabID,
								ci.ModuleID
						 FROM {databaseOwner}{objectQualifier}Journal j
						INNER JOIN {databaseOwner}{objectQualifier}Journal_Security js ON js.JournalId = j.JournalId
						INNER JOIN ValidJournals vj ON vj.JournalId = j.JournalId
						INNER JOIN {databaseOwner}{objectQualifier}Users u ON u.UserID = j.UserId
                        INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID = j.ContentItemId
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
